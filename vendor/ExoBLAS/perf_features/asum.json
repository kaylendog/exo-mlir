{
    "dasum_stride_1": {
        "flops": {
            "algorithm": "3*n",
            "scheduled": "3*n"
        },
        "flops_upper_bound": {
            "algorithm": "3*n",
            "scheduled": "3*n"
        },
        "load_mem_traffic": {
            "algorithm": "8*(4*n)",
            "scheduled": "8*(8*n + 1)"
        },
        "load_mem_traffic_upper_bound": {
            "algorithm": "8*(4*n)",
            "scheduled": "8*(8*n + 1)"
        },
        "store_mem_traffic": {
            "algorithm": "8*(n + 1)",
            "scheduled": "8*(5*n + 2)"
        },
        "store_mem_traffic_upper_bound": {
            "algorithm": "8*(n + 1)",
            "scheduled": "8*(5*n + 2)"
        }
    },
    "sasum_stride_1": {
        "flops": {
            "algorithm": "3*n",
            "scheduled": "24*(Mod(floor(n/8 + 7/8) + 1, 2) + 8*floor(floor(n/8 + 7/8)/8 - 1/8) + 2*floor((Mod(floor(n/8 + 7/8) + 3, 4))/2) + 4*floor((Mod(floor(n/8 + 7/8) + 7, 8))/4) + 5)"
        },
        "flops_upper_bound": {
            "algorithm": "3*n",
            "scheduled": "3*(n + 127)"
        },
        "load_mem_traffic": {
            "algorithm": "4*(4*n)",
            "scheduled": "4*(8*(Mod(floor(n/8 + 7/8) + 1, 2)) + 64*floor(floor(n/8 + 7/8)/8 - 1/8) + 16*floor((Mod(floor(n/8 + 7/8) + 3, 4))/2) + 32*floor((Mod(floor(n/8 + 7/8) + 7, 8))/4) + 9)"
        },
        "load_mem_traffic_upper_bound": {
            "algorithm": "4*(4*n)",
            "scheduled": "4*(n + 96)"
        },
        "store_mem_traffic": {
            "algorithm": "4*(n + 1)",
            "scheduled": "4*10"
        },
        "store_mem_traffic_upper_bound": {
            "algorithm": "4*(n + 1)",
            "scheduled": "4*10"
        }
    }
}