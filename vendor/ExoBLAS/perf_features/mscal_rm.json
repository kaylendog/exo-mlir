{
    "dmscal_rm_stride_1": {
        "flops": {
            "algorithm": "M*N",
            "scheduled": "4*M*(Mod(floor(N/4 + 3/4) + 1, 2) + 4*floor(floor(N/4 + 3/4)/4 - 1/4) + 2*floor((Mod(floor(N/4 + 3/4) + 3, 4))/2))"
        },
        "flops_upper_bound": {
            "algorithm": "M*N",
            "scheduled": "M*(N + 15)"
        },
        "load_mem_traffic": {
            "algorithm": "8*(2*M*N)",
            "scheduled": "8*(4*M*(Mod(floor(N/4 + 3/4) + 1, 2)) + 16*M*floor(floor(N/4 + 3/4)/4 - 1/4) + 8*M*floor((Mod(floor(N/4 + 3/4) + 3, 4))/2) + 1)"
        },
        "load_mem_traffic_upper_bound": {
            "algorithm": "8*(2*M*N)",
            "scheduled": "8*(M*N + 15*M + 1)"
        },
        "store_mem_traffic": {
            "algorithm": "8*(M*N)",
            "scheduled": "8*(4*M*(Mod(floor(N/4 + 3/4) + 1, 2)) + 16*M*floor(floor(N/4 + 3/4)/4 - 1/4) + 8*M*floor((Mod(floor(N/4 + 3/4) + 3, 4))/2) + 1)"
        },
        "store_mem_traffic_upper_bound": {
            "algorithm": "8*(M*N)",
            "scheduled": "8*(M*N + 15*M + 1)"
        }
    },
    "smscal_rm_stride_1": {
        "flops": {
            "algorithm": "M*N",
            "scheduled": "8*M*(Mod(floor(N/8 + 7/8) + 1, 2) + 4*floor(floor(N/8 + 7/8)/4 - 1/4) + 2*floor((Mod(floor(N/8 + 7/8) + 3, 4))/2))"
        },
        "flops_upper_bound": {
            "algorithm": "M*N",
            "scheduled": "M*(N + 31)"
        },
        "load_mem_traffic": {
            "algorithm": "4*(2*M*N)",
            "scheduled": "4*(8*M*(Mod(floor(N/8 + 7/8) + 1, 2)) + 32*M*floor(floor(N/8 + 7/8)/4 - 1/4) + 16*M*floor((Mod(floor(N/8 + 7/8) + 3, 4))/2) + 1)"
        },
        "load_mem_traffic_upper_bound": {
            "algorithm": "4*(2*M*N)",
            "scheduled": "4*(M*N + 31*M + 1)"
        },
        "store_mem_traffic": {
            "algorithm": "4*(M*N)",
            "scheduled": "4*(8*M*(Mod(floor(N/8 + 7/8) + 1, 2)) + 32*M*floor(floor(N/8 + 7/8)/4 - 1/4) + 16*M*floor((Mod(floor(N/8 + 7/8) + 3, 4))/2) + 1)"
        },
        "store_mem_traffic_upper_bound": {
            "algorithm": "4*(M*N)",
            "scheduled": "4*(M*N + 31*M + 1)"
        }
    }
}