{
    "daxpy_stride_1": {
        "flops": {
            "algorithm": "2*n",
            "scheduled": "8*(Mod(floor(n/4 + 3/4) + 1, 2) + 8*floor(floor(n/4 + 3/4)/8 - 1/8) + 2*floor((Mod(floor(n/4 + 3/4) + 3, 4))/2) + 4*floor((Mod(floor(n/4 + 3/4) + 7, 8))/4))"
        },
        "flops_upper_bound": {
            "algorithm": "2*n",
            "scheduled": "2*(n + 43)"
        },
        "load_mem_traffic": {
            "algorithm": "8*(3*n)",
            "scheduled": "8*(8*(Mod(floor(n/4 + 3/4) + 1, 2)) + 64*floor(floor(n/4 + 3/4)/8 - 1/8) + 16*floor((Mod(floor(n/4 + 3/4) + 3, 4))/2) + 32*floor((Mod(floor(n/4 + 3/4) + 7, 8))/4) + 1)"
        },
        "load_mem_traffic_upper_bound": {
            "algorithm": "8*(3*n)",
            "scheduled": "8*(2*n + 87)"
        },
        "store_mem_traffic": {
            "algorithm": "8*n",
            "scheduled": "8*(4*(Mod(floor(n/4 + 3/4) + 1, 2)) + 32*floor(floor(n/4 + 3/4)/8 - 1/8) + 8*floor((Mod(floor(n/4 + 3/4) + 3, 4))/2) + 16*floor((Mod(floor(n/4 + 3/4) + 7, 8))/4) + 1)"
        },
        "store_mem_traffic_upper_bound": {
            "algorithm": "8*n",
            "scheduled": "8*(n + 44)"
        }
    },
    "saxpy_stride_1": {
        "flops": {
            "algorithm": "2*n",
            "scheduled": "2*n"
        },
        "flops_upper_bound": {
            "algorithm": "2*n",
            "scheduled": "2*n"
        },
        "load_mem_traffic": {
            "algorithm": "4*(3*n)",
            "scheduled": "4*(3*n + 1)"
        },
        "load_mem_traffic_upper_bound": {
            "algorithm": "4*(3*n)",
            "scheduled": "4*(3*n + 1)"
        },
        "store_mem_traffic": {
            "algorithm": "4*n",
            "scheduled": "4*(n + 1)"
        },
        "store_mem_traffic_upper_bound": {
            "algorithm": "4*n",
            "scheduled": "4*(n + 1)"
        }
    }
}